import tkinter as tk
from tkinter import ttk, simpledialog, messagebox
import mysql.connector

class AddDialog(tk.Toplevel):
    def __init__(self, parent, fields, table_name, root):
        super().__init__(root)
        self.title("Add Record")
        self.parent = parent
        self.fields = fields
        self.table_name = table_name
        self.entries = {}
        self.create_widgets()

    def create_widgets(self):
        for i, (label_text, field_type) in enumerate(self.fields):
            label = tk.Label(self, text=label_text)
            label.grid(row=i, column=0, padx=5, pady=5, sticky='e')
            entry = tk.Entry(self)
            entry.grid(row=i, column=1, padx=5, pady=5, sticky='we')
            self.entries[label_text] = entry

        add_button = tk.Button(self, text="Add", command=self.add_record)
        add_button.grid(row=len(self.fields), columnspan=2, padx=5, pady=10)

    def add_record(self):
        values = [entry.get() for entry in self.entries.values()]
        if all(values):
            self.parent.add_record(self.table_name, values)
            self.destroy()
        else:
            messagebox.showwarning("Incomplete Information", "Please fill in all fields.")

class BloodDonationApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Blood Donation Database")
        
        # Database Connection
        self.conn = mysql.connector.connect(
            host="localhost",
            user="root",  # Update with your MySQL username
            password="password",  
            database="blood_donation"
        )
        self.cur = self.conn.cursor()
        
        # Create tables if not exists
        self.create_tables()
        
        # Create UI
        self.create_widgets()
        
    def create_tables(self):
        self.cur.execute("""
            CREATE TABLE IF NOT EXISTS Donor (
                Donor_Id INT PRIMARY KEY,
                Donor_Name VARCHAR(255),
                Blood_Group VARCHAR(10),
                Last_Donated DATE
            )
        """)
        self.cur.execute("""
            CREATE TABLE IF NOT EXISTS Patient (
                Patient_No INT AUTO_INCREMENT PRIMARY KEY,
                Blood_Group VARCHAR(10),
                Priority INT,
                Hospital VARCHAR(255),
                Areacode VARCHAR(10)
            )
        """)
        self.cur.execute("""
            CREATE TABLE IF NOT EXISTS Blood (
                Blood_Id INT PRIMARY KEY,
                Blood_Type VARCHAR(10)
            )
        """)
        self.cur.execute("""
            CREATE TABLE IF NOT EXISTS Stock (
                Stock_Id INT AUTO_INCREMENT PRIMARY KEY,
                Blood_Id INT,
                Available_Amount INT,
                Areacode VARCHAR(10),
                FOREIGN KEY (Blood_Id) REFERENCES Blood(Blood_Id)
            )
        """)
        self.conn.commit()
        
    def create_widgets(self):
        self.tab_control = ttk.Notebook(self.root)
        
        self.donor_tab = ttk.Frame(self.tab_control)
        self.tab_control.add(self.donor_tab, text='Donor')
        self.tab_control.pack(expand=1, fill="both")
        
        # Donor Tab
        self.create_tab(self.donor_tab, "Donor", ["Donor_Id", "Donor_Name", "Blood_Group", "Last_Donated"])
        
        self.patient_tab = ttk.Frame(self.tab_control)
        self.tab_control.add(self.patient_tab, text='Patient')
        self.tab_control.pack(expand=1, fill="both")
        
        # Patient Tab
        self.create_tab(self.patient_tab, "Patient", ["Blood_Group", "Priority", "Hospital", "Areacode"])
        
        self.blood_tab = ttk.Frame(self.tab_control)
        self.tab_control.add(self.blood_tab, text='Blood')
        self.tab_control.pack(expand=1, fill="both")
        
        # Blood Tab
        self.create_tab(self.blood_tab, "Blood", ["Blood_Id", "Blood_Type"])
        
        self.stock_tab = ttk.Frame(self.tab_control)
        self.tab_control.add(self.stock_tab, text='Stock')
        self.tab_control.pack(expand=1, fill="both")
        
        # Stock Tab
        self.create_tab(self.stock_tab, "Stock", ["Stock_Id", "Blood_Id", "Available_Amount", "Areacode"])
        
    def create_tab(self, tab, table_name, columns):
        tree = ttk.Treeview(tab, columns=columns, show='headings')
        for col in columns:
            tree.heading(col, text=col)
        tree.pack(expand=1, fill='both')
        setattr(self, f"{table_name.lower()}_tree", tree)
        self.refresh_table(table_name)
        
        add_btn = tk.Button(tab, text=f"Add {table_name}", command=lambda: self.open_add_dialog(table_name))
        add_btn.pack(side='left')
        
        delete_btn = tk.Button(tab, text=f"Delete {table_name}", command=lambda: self.delete_record(table_name))
        delete_btn.pack(side='left')
        
    def refresh_table(self, table_name):
        tree = getattr(self, f"{table_name.lower()}_tree")
        tree.delete(*tree.get_children())
        self.cur.execute(f"SELECT * FROM {table_name}")
        rows = self.cur.fetchall()
        for row in rows:
            tree.insert('', 'end', values=row)
            
    def open_add_dialog(self, table_name):
        fields = self.get_fields(table_name)
        AddDialog(self, fields, table_name, self.root)
        
    def delete_record(self, table_name):
        selected_item = getattr(self, f"{table_name.lower()}_tree").selection()
        if not selected_item:
            messagebox.showwarning("Error", f"Please select a {table_name.lower()}.")
            return
        record_id = getattr(self, f"{table_name.lower()}_tree").item(selected_item, 'values')[0]
        confirm = messagebox.askyesno("Confirm", f"Are you sure you want to delete this {table_name.lower()}?")
        if confirm:
            try:
                if table_name == "Patient":
                    self.cur.execute(f"DELETE FROM {table_name} WHERE {table_name}_No = %s", (record_id,))
                elif table_name == "Stock":
                    self.cur.execute(f"DELETE FROM {table_name} WHERE Blood_Id = %s", (record_id,))
                else:
                    self.cur.execute(f"DELETE FROM {table_name} WHERE {table_name}_Id = %s", (record_id,))
                self.conn.commit()
                self.refresh_table(table_name)  # Refresh list after deleting record
                messagebox.showinfo("Success", f"{table_name} record deleted successfully.")
            except mysql.connector.Error as err:
                messagebox.showerror("Error", f"Error occurred: {err}")

    def get_fields(self, table_name):
        self.cur.execute(f"DESCRIBE {table_name}")
        fields = []
        for field in self.cur.fetchall():
            fields.append((field[0], "text"))
        return fields

    def add_record(self, table_name, values):
        try:
            if table_name == "Donor":
                sql = f"INSERT INTO {table_name} VALUES (%s, %s, %s, %s)"
            elif table_name == "Patient":
                sql = f"INSERT INTO {table_name} VALUES ( %s, %s, %s, %s, %s)"
            elif table_name =="Blood":
                sql = f"INSERT INTO {table_name} VALUES ( %s, %s)"
            else:
                sql = f"INSERT INTO {table_name} VALUES ( %s, %s, %s, %s)"
            self.cur.execute(sql, values)
            self.conn.commit()
            self.refresh_table(table_name)  # Refresh list after adding record
            messagebox.showinfo("Success", "Record added successfully.")
        except mysql.connector.Error as err:
            messagebox.showerror("Error", f"Error occurred: {err}")

# Homepage
class HomePage:
    def __init__(self, root):
        self.root = root
        self.root.title("Blood Donation Homepage")

        self.label = tk.Label(root, text="Blood Donation System", font=("Helvetica", 16))
        self.label.pack(pady=20)

        self.btn_blood_donation = tk.Button(root, text="Blood Donation App", command=self.open_blood_donation)
        self.btn_blood_donation.pack(pady=10)

    def open_blood_donation(self):
        self.root.destroy()
        root = tk.Tk()
        app = BloodDonationApp(root)
        root.mainloop()

root = tk.Tk()
home = HomePage(root)
root.mainloop()
